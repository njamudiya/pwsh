#
# vSphere Runtime for VMware Infrastructure Bindings
# vSphere Runtime Implementation for vSphere Components.
# Version: 1.0
# Contact: powercli@vmware.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#


$PRODUCT_NAME = 'vSphere'

<#
.SYNOPSIS

Creates server configuration instance for a product.

.DESCRIPTION

Creates server configuration instance for a product.

.PARAMETER Server
Specifies the IP address or the DNS name of the server to which you want to connect.

.PARAMETER Username
Username in HTTP basic authentication

.PARAMETER Password
Password in HTTP basic authentication

.PARAMETER Credential
Credential object based on the username and password in HTTP basic authentication.

.PARAMETER ApiKey
API Keys for authentication/authorization

.PARAMETER AccessToken
Access token for authentication/authorization

.PARAMETER SkipCertificateCheck
Skip certificate verification

.PARAMETER ProxyUri
Proxy Uri setting

.PARAMETER SerializeNulls
If specified, serializes all $null values and sends them as part of the request.

.PARAMETER WebOperationTimeoutSeconds
Maximum HTTP request/response time in seconds

.PARAMETER VIConnection
Specifies the PowerCLI Connection from which to create a server configuration instance for a product.

.PARAMETER NotDefault
If specified, the created server configuration will not be added to the list of server configurations used by Invoke-ApiClient.

.OUTPUTS

ServerConfiguration
#>
function New-vSphereServerConfiguration {
    [CmdletBinding(DefaultParameterSetName = 'Username')]
    param (
        [Parameter(Mandatory = $true, ParameterSetName = 'Username')]
        [Parameter(Mandatory = $true, ParameterSetName = 'Credential')]
        [ValidateNotNullOrEmpty()]
        [string]
        $Server,

        [Parameter(ParameterSetName = 'Username')]
        [AllowEmptyString()]
        [string]
        $Username,

        [Parameter(ParameterSetName = 'Username')]
        [AllowEmptyString()]
        [SecureString]
        $Password,

        [Parameter(ParameterSetName = 'Credential')]
        [PSCredential]
        $Credential,

        [Parameter(Mandatory = $false, ParameterSetName = 'Username')]
        [Parameter(Mandatory = $false, ParameterSetName = 'Credential')]
        [string]
        $ApiKey,

        [Parameter(Mandatory = $false, ParameterSetName = 'Username')]
        [Parameter(Mandatory = $false, ParameterSetName = 'Credential')]
        [string]
        $AccessToken,

        [Parameter(Mandatory = $false, ParameterSetName = 'Username')]
        [Parameter(Mandatory = $false, ParameterSetName = 'Credential')]
        [switch]
        $SerializeNulls,

        [Parameter(Mandatory = $false, ParameterSetName = 'Username')]
        [Parameter(Mandatory = $false, ParameterSetName = 'Credential')]
        [switch]
        $SkipCertificateCheck,

        [Parameter(Mandatory = $false, ParameterSetName = 'Username')]
        [Parameter(Mandatory = $false, ParameterSetName = 'Credential')]
        [int]
        $WebOperationTimeoutSeconds,

        [Parameter(Mandatory = $false, ParameterSetName = 'Username')]
        [Parameter(Mandatory = $false, ParameterSetName = 'Credential')]
        [Uri]
        $ProxyUri,

        [Parameter(Mandatory = $true, ParameterSetName = 'VIConnection')]
        [object]
        $VIConnection,

        [Parameter()]
        [switch]
        $NotDefault = $false,

        [Parameter()]
        [switch]
        $UseDeprecatedApis
    )

    if ($PSCmdlet.ParameterSetName -eq 'VIConnection') {
        if ($null -eq ($VIConnection.GetType().GetInterfaces() | Where-Object -FilterScript { $_.Name -eq 'CisSession' })) {
            throw "Invalid value for parameter 'VIConnection': $VIConnection. Only objects of type 'VIServer' are supported."
        }

        $PowerCLIConfiguration = Get-PowerCLIConfiguration -Scope Session

        $CisSessionId = $null

        try {
            $CisSessionId = $VIConnection.GetCisSessionId()
        } catch {
            throw ('An error occurred while establishing a CIS connection for server {0}. For more information: {1}' -f $VIConnection.Name, $_.Exception.Message)
        }

        if ($null -eq $CisSessionId) {
            throw ('CIS session id not found for server {0}' -f $VIConnection.Name)
        }

        $newServerConfigurationParams = @{
            'Product' = $PRODUCT_NAME
            'BaseUrl' = "https://$($VIConnection.Name)"
            'SerializeNulls' = $false
            'SkipCertificateCheck' = ($PowerCLIConfiguration.InvalidCertificateAction -eq 'Ignore')
            'ProxyUri' = $null
            'NotDefault' = $true
        }

        $result = New-ServerConfiguration @newServerConfigurationParams
        $result.PSObject.TypeNames.Add('ServerConfiguration')

        $result.Authorization.Headers['vmware-api-session-id'] = $CisSessionId

        $result.PSObject.TypeNames.Add('vSphereServerConfiguration')
        $result | Add-Member -MemberType NoteProperty -Name Server -Value $VIConnection.Name
        $result | Add-Member -MemberType NoteProperty -Name Username -Value $null
        $result | Add-Member -MemberType NoteProperty -Name Password -Value $null
        $result | Add-Member -MemberType NoteProperty -Name PowerCLIConnection -Value $VIConnection
        $result | Add-Member -MemberType NoteProperty -Name WebOperationTimeoutSeconds -Value $PowerCLIConfiguration.WebOperationTimeoutSeconds
        $result | Add-Member -MemberType NoteProperty -Name UseDeprecatedApis -Value $null
        if ($PSBoundParameters.ContainsKey('UseDeprecatedApis')) {
            $result.UseDeprecatedApis = $UseDeprecatedApis.IsPresent
        }

        $PowerCLIConnections = $global:DefaultVIServers | Where-Object -FilterScript { $_.IsConnected }
        $result | Add-Member -MemberType NoteProperty -Name InSyncWithPowerCLIServers -Value ($PowerCLIConnections -Contains $VIConnection)

        $result | Add-Member -MemberType ScriptMethod -Name Equals -Value {param($that) ($this.BaseUrl -eq $that.BaseUrl) -and ($this.PowerCLIConnection -eq $that.PowerCLIConnection)} -Force
        $result | Add-Member -MemberType ScriptMethod -Name ToString { $this.PowerCLIConnection.Id } -Force

        $result | Update-ServerConfigurationDeprecatedApis
        if ($NotDefault.IsPresent) {
            $result
        } else {
            $result | Add-ServerConfiguration
        }
    } else {
        if ($PSCmdlet.ParameterSetName -eq 'Credential' -and $null -ne $Credential) {
            $Username = $Credential.UserName
            $Password = $Credential.Password
        }

        $result = New-ServerConfiguration `
            -Product $PRODUCT_NAME `
            -BaseUrl "https://$Server" `
            -SerializeNulls:$SerializeNulls.IsPresent `
            -SkipCertificateCheck:$SkipCertificateCheck.IsPresent `
            -ProxyUri $ProxyUri `
            -NotDefault:$true

        $result.PSObject.TypeNames.Add('ServerConfiguration')

        if ($PSBoundParameters.ContainsKey('ApiKey')) {
            $result.Authorization.Headers['vmware-api-session-id'] = $ApiKey
        }

        $result.PSObject.TypeNames.Add('vSphereServerConfiguration')
        $result | Add-Member -MemberType NoteProperty -Name Server -Value $Server
        $result | Add-Member -MemberType NoteProperty -Name Username -Value $Username
        $result | Add-Member -MemberType NoteProperty -Name Password -Value $Password
        $result | Add-Member -MemberType NoteProperty -Name WebOperationTimeoutSeconds -Value $WebOperationTimeoutSeconds
        $result | Add-Member -MemberType NoteProperty -Name UseDeprecatedApis -Value $null
        if ($PSBoundParameters.ContainsKey('UseDeprecatedApis')) {
            $result.UseDeprecatedApis = $UseDeprecatedApis.IsPresent
        }

        $result | Add-Member -MemberType ScriptMethod -Name ToString { $this.Server } -Force

        $result | Update-ServerConfigurationDeprecatedApis
        if ($NotDefault.IsPresent) {
            $result
        } else {
            $result | Add-ServerConfiguration
        }
    }
}

function Update-ServerConfigurationDeprecatedApis {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true, ValueFromPipeline = $true)]
        [PSTypeName('vSphereServerConfiguration')]
        $ServerConfiguration
    )

    if (
        $null -eq $ServerConfiguration.UseDeprecatedApis -and
        $null -ne $ServerConfiguration.Authorization.Headers['vmware-api-session-id']
    ) {
        $versionApiUrl = $ServerConfiguration.BaseUrl + '/rest/appliance/system/version'
        $SkipCertificateCheck = $ServerConfiguration.SkipCertificateCheck

        $invokeParams = @{
            'Method' = 'GET'
            'Uri' = $versionApiUrl
            'Headers' = $ServerConfiguration.Authorization.Headers
        }

        try {
            $InvokeRestMethodXParams = @{
                'InvokeParams' = $invokeParams
                'SkipCertificateCheck' = ([bool] $SkipCertificateCheck)
            }

            $result = Invoke-RestMethodX @InvokeRestMethodXParams
            if ($null -ne $result) {
                $ServerConfiguration.UseDeprecatedApis = ([version]($result.value.version) -lt [version]"7.0.2")
            }
        } catch {
            $ServerConfiguration.UseDeprecatedApis = $false
        }
    }
}

<#
.SYNOPSIS

Syncs vSphere Server Configuration Objects with PowerCLI $DefaultVIServers
#>
function Sync-PowerCLIConnections {

    if ($null -ne (Get-Module -Name 'VMware.VimAutomation.Core')) {
        $ServerConfigurations = Get-ServerConfiguration -Product $PRODUCT_NAME | Where-Object -FilterScript { $_.PowerCLIConnection -ne $null }
        $PowerCLIConnections = $global:DefaultVIServers | Where-Object -FilterScript { $_.IsConnected }

        $ServerConfigurationsPowerCLIConnections = $ServerConfigurations | Foreach-Object { $_.PowerCLIConnection }

        # Remove Server Configurations for missing PowerCLI Connections
        foreach ($ServerConfiguration in $ServerConfigurations) {
            if ($PowerCLIConnections -NotContains $ServerConfiguration.PowerCLIConnection -and $ServerConfiguration.InSyncWithPowerCLIServers) {
                $ServerConfiguration | Remove-ServerConfiguration
            }
        }

        foreach ($PowerCLIConnection in $PowerCLIConnections) {
            if ($ServerConfigurationsPowerCLIConnections -NotContains $PowerCLIConnection) {
                New-vSphereServerConfiguration -VIConnection $PowerCLIConnection | Out-Null
            } else {
                $CisSessionId = $PowerCLIConnection.GetCisSessionId()

                # Update CIS session id on each sync for existing Server Configuration Objects to ensure that the session is still alive.
                $PowerCLIServerConfiguration = $ServerConfigurations | Where-Object -FilterScript { $_.PowerCLIConnection -eq $PowerCLIConnection }
                $PowerCLIServerConfiguration | Set-vSphereServerConfiguration -ApiKey $CisSessionId | Out-Null
            }
        }
    }
}

<#
.SYNOPSIS

Gets vSphereServerConfiguration objects.

.DESCRIPTION

The result server configuration objects are used by the Invoke-vSphereApiClient. A server configuration object can be modified or removed from the list of tracked server configurations.

Set the API Key.

.OUTPUTS
ServerConfiguration

None
#>
function Get-vSphereServerConfiguration {
	Sync-PowerCLIConnections
    Get-ServerConfiguration -Product $PRODUCT_NAME | Where-Object { $_ -ne $null }
}

<#
.SYNOPSIS

Updates vSphere Server Configuration

.DESCRIPTION

Updates vSphere Server Configuration

.PARAMETER ServerConfiguration
The server configuration object to update with an API Key from the SessionResponse

.PARAMETER Username
Username in HTTP basic authentication

.PARAMETER Password
Password in HTTP basic authentication

.PARAMETER Credential
Credential object based on the username and password in HTTP basic authentication.

.PARAMETER ApiKey
API Keys for authentication/authorization

.PARAMETER AccessToken
Access token for authentication/authorization

.PARAMETER SkipCertificateCheck
Skip certificate verification

.PARAMETER DefaultHeaders
Default HTTP headers to be included in the HTTP request

.PARAMETER ProxyUri
Proxy Uri setting

.PARAMETER SerializeNulls
If specified, serializes all $null values and sends them as part of the request.

.OUTPUTS

None
#>
function Set-vSphereServerConfiguration {
    [CmdletBinding(DefaultParameterSetName = 'Username')]
    param (
        [Parameter(Mandatory = $true, ValueFromPipeline = $true)]
        [PSTypeName('vSphereServerConfiguration')]
        $ServerConfiguration,

        [Parameter(ParameterSetName = 'Username')]
        [AllowEmptyString()]
        [string]
        $Username,

        [Parameter(ParameterSetName = 'Username')]
        [AllowEmptyString()]
        [SecureString]
        $Password,

        [Parameter(ParameterSetName = 'Credential')]
        [PSCredential]
        $Credential,

        [Parameter()]
        [string]
        $ApiKey,

        [Parameter()]
        [AllowEmptyString()]
        [string]
        $AccessToken,

        [Parameter()]
        [switch]
        $SerializeNulls,

        [Parameter()]
        [switch]
        $SkipCertificateCheck,

        [Parameter()]
        [int]
        $WebOperationTimeoutSeconds,

        [Parameter()]
        [Uri]
        $ProxyUri
    )

    Process {
        if ($PSCmdlet.ParameterSetName -eq 'Credential' -and $null -ne $Credential) {
            $Username = $Credential.UserName
            $Password = $Credential.Password
        }

        if ($PSBoundParameters.ContainsKey('Username') -or $PSBoundParameters.ContainsKey('Credential')) {
            $ServerConfiguration.Username = $Username
        }

        if ($PSBoundParameters.ContainsKey('Password') -or $PSBoundParameters.ContainsKey('Credential')) {
            $ServerConfiguration.Password = $Password
        }

        if ($PSBoundParameters.ContainsKey('ApiKey')) {
            $ServerConfiguration.Authorization.Headers['vmware-api-session-id'] = $ApiKey
        }
        if ($PSBoundParameters.ContainsKey('WebOperationTimeoutSeconds')) {
            $ServerConfiguration.WebOperationTimeoutSeconds = $WebOperationTimeoutSeconds
        }

        if ($PSBoundParameters.ContainsKey('SkipCertificateCheck')) {
            $ServerConfiguration.SkipCertificateCheck = $SkipCertificateCheck.IsPresent
            $ServerConfiguration = $ServerConfiguration | Set-ServerConfiguration -SkipCertificateCheck:$SkipCertificateCheck.IsPresent
        }

        if ($PSBoundParameters.ContainsKey('SerializeNulls')) {
            $ServerConfiguration.SerializeNulls = $SerializeNulls.IsPresent
        }

        if ($PSBoundParameters.ContainsKey('ProxyUri')) {
            $ServerConfiguration.Proxy = $ProxyUri
        }

		$ServerConfiguration | Update-ServerConfigurationDeprecatedApis

        $ServerConfiguration
    }
}

<#
.SYNOPSIS

Set the API Key.

.DESCRIPTION

Set the API Key.

.PARAMETER ServerConfiguration
The server configuration object to update with an API Key from the SessionResponse

.PARAMETER SessionResponse
The object returned by Invoke-CreateSession

.OUTPUTS

None
#>
function Set-vSphereServerConfigurationApiKey {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true, ValueFromPipeline = $true)]
        [PSTypeName('vSphereServerConfiguration')]
        $ServerConfiguration,

        [Parameter()]
        [Hashtable]
        $SessionResponse
    )

    Process {
        if ($null -ne $SessionResponse -and $null -ne $SessionResponse.Headers) {
            $ApiKey = $null
            $ApiKeyHeaderValue = $SessionResponse.Headers['vmware-api-session-id'] | Select-Object -First 1
            $DeprecatedApiKeyHeaderValue = $null

            <#
                On PowerShell Core, the Header value is an array of strings and on PowerShell 5.1 a
                single string. So depending on the version, the ApiKey is extracted differently.
            #>
            if ($Global:PSVersionTable.PSEdition -eq 'Core') {
                $DeprecatedApiKeyHeaderValue = $SessionResponse.Headers['Set-Cookie'] | Select-Object -First 1
            } else {
                <#
                    In the deprecated APIs on PowerShell 5.1, the Header string value contains two entries
                    separated by ',', so we need to extract the first entry from the string.
                #>
                $DeprecatedApiKeyHeaderValue = $SessionResponse.Headers['Set-Cookie'] -Split ',' | Select-Object -First 1
            }

            if (![string]::IsNullOrEmpty($ApiKeyHeaderValue)) {
                $ApiKey = $ApiKeyHeaderValue
            } elseif (![string]::IsNullOrEmpty($DeprecatedApiKeyHeaderValue) -and $DeprecatedApiKeyHeaderValue -Match 'vmware-api-session-id') {
                <#
                    The API Key should be extracted from the cookie because it comes in
                    the following format: "vmware-api-session-id=83d25d63393fbd0075cee756500ffd37; Path=/rest; Secure; HttpOnly"
                #>
                $SessionCookie = $DeprecatedApiKeyHeaderValue
                $SessionPart = $SessionCookie -Split ';' | Select-Object -First 1

                $ApiKey = ($SessionPart -Split 'vmware-api-session-id=')[1]
            }

            if (![string]::IsNullOrEmpty($ApiKey)) {
                # reset Username and Password as the ApiKey is with highest priority
                $ServerConfiguration | Set-vSphereServerConfiguration -Username $null -Password $null -ApiKey $ApiKey
            }
        }
    }
}

<#
.SYNOPSIS
Removes a vSphere server configuration object.

.DESCRIPTION
Removes a vSphere server configuration object from the list of the server configurations used by Invoke cmdlets.

.PARAMETER ServerConfiguration
Specifies the server configuration object to remove

.OUTPUTS
None

#>
function Remove-vSphereServerConfiguration {
param(
    [Parameter(Mandatory = $true, ValueFromPipeline = $true)]
    [PSTypeName('vSphereServerConfiguration')]
    $ServerConfiguration
)

    Process {
        Remove-ServerConfiguration -ServerConfiguration $ServerConfiguration
    }
}

# SIG # Begin signature block
# MIIrIAYJKoZIhvcNAQcCoIIrETCCKw0CAQExDzANBglghkgBZQMEAgEFADB5Bgor
# BgEEAYI3AgEEoGswaTA0BgorBgEEAYI3AgEeMCYCAwEAAAQQH8w7YFlLCE63JNLG
# KX7zUQIBAAIBAAIBAAIBAAIBADAxMA0GCWCGSAFlAwQCAQUABCDHrkNnx1XRiLmG
# Z4KbjZuB6bRCEw8USxpu5upIn2DEe6CCDdowggawMIIEmKADAgECAhAIrUCyYNKc
# TJ9ezam9k67ZMA0GCSqGSIb3DQEBDAUAMGIxCzAJBgNVBAYTAlVTMRUwEwYDVQQK
# EwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsTEHd3dy5kaWdpY2VydC5jb20xITAfBgNV
# BAMTGERpZ2lDZXJ0IFRydXN0ZWQgUm9vdCBHNDAeFw0yMTA0MjkwMDAwMDBaFw0z
# NjA0MjgyMzU5NTlaMGkxCzAJBgNVBAYTAlVTMRcwFQYDVQQKEw5EaWdpQ2VydCwg
# SW5jLjFBMD8GA1UEAxM4RGlnaUNlcnQgVHJ1c3RlZCBHNCBDb2RlIFNpZ25pbmcg
# UlNBNDA5NiBTSEEzODQgMjAyMSBDQTEwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAw
# ggIKAoICAQDVtC9C0CiteLdd1TlZG7GIQvUzjOs9gZdwxbvEhSYwn6SOaNhc9es0
# JAfhS0/TeEP0F9ce2vnS1WcaUk8OoVf8iJnBkcyBAz5NcCRks43iCH00fUyAVxJr
# Q5qZ8sU7H/Lvy0daE6ZMswEgJfMQ04uy+wjwiuCdCcBlp/qYgEk1hz1RGeiQIXhF
# LqGfLOEYwhrMxe6TSXBCMo/7xuoc82VokaJNTIIRSFJo3hC9FFdd6BgTZcV/sk+F
# LEikVoQ11vkunKoAFdE3/hoGlMJ8yOobMubKwvSnowMOdKWvObarYBLj6Na59zHh
# 3K3kGKDYwSNHR7OhD26jq22YBoMbt2pnLdK9RBqSEIGPsDsJ18ebMlrC/2pgVItJ
# wZPt4bRc4G/rJvmM1bL5OBDm6s6R9b7T+2+TYTRcvJNFKIM2KmYoX7BzzosmJQay
# g9Rc9hUZTO1i4F4z8ujo7AqnsAMrkbI2eb73rQgedaZlzLvjSFDzd5Ea/ttQokbI
# YViY9XwCFjyDKK05huzUtw1T0PhH5nUwjewwk3YUpltLXXRhTT8SkXbev1jLchAp
# QfDVxW0mdmgRQRNYmtwmKwH0iU1Z23jPgUo+QEdfyYFQc4UQIyFZYIpkVMHMIRro
# OBl8ZhzNeDhFMJlP/2NPTLuqDQhTQXxYPUez+rbsjDIJAsxsPAxWEQIDAQABo4IB
# WTCCAVUwEgYDVR0TAQH/BAgwBgEB/wIBADAdBgNVHQ4EFgQUaDfg67Y7+F8Rhvv+
# YXsIiGX0TkIwHwYDVR0jBBgwFoAU7NfjgtJxXWRM3y5nP+e6mK4cD08wDgYDVR0P
# AQH/BAQDAgGGMBMGA1UdJQQMMAoGCCsGAQUFBwMDMHcGCCsGAQUFBwEBBGswaTAk
# BggrBgEFBQcwAYYYaHR0cDovL29jc3AuZGlnaWNlcnQuY29tMEEGCCsGAQUFBzAC
# hjVodHRwOi8vY2FjZXJ0cy5kaWdpY2VydC5jb20vRGlnaUNlcnRUcnVzdGVkUm9v
# dEc0LmNydDBDBgNVHR8EPDA6MDigNqA0hjJodHRwOi8vY3JsMy5kaWdpY2VydC5j
# b20vRGlnaUNlcnRUcnVzdGVkUm9vdEc0LmNybDAcBgNVHSAEFTATMAcGBWeBDAED
# MAgGBmeBDAEEATANBgkqhkiG9w0BAQwFAAOCAgEAOiNEPY0Idu6PvDqZ01bgAhql
# +Eg08yy25nRm95RysQDKr2wwJxMSnpBEn0v9nqN8JtU3vDpdSG2V1T9J9Ce7FoFF
# UP2cvbaF4HZ+N3HLIvdaqpDP9ZNq4+sg0dVQeYiaiorBtr2hSBh+3NiAGhEZGM1h
# mYFW9snjdufE5BtfQ/g+lP92OT2e1JnPSt0o618moZVYSNUa/tcnP/2Q0XaG3Ryw
# YFzzDaju4ImhvTnhOE7abrs2nfvlIVNaw8rpavGiPttDuDPITzgUkpn13c5Ubdld
# AhQfQDN8A+KVssIhdXNSy0bYxDQcoqVLjc1vdjcshT8azibpGL6QB7BDf5WIIIJw
# 8MzK7/0pNVwfiThV9zeKiwmhywvpMRr/LhlcOXHhvpynCgbWJme3kuZOX956rEnP
# LqR0kq3bPKSchh/jwVYbKyP/j7XqiHtwa+aguv06P0WmxOgWkVKLQcBIhEuWTatE
# QOON8BUozu3xGFYHKi8QxAwIZDwzj64ojDzLj4gLDb879M4ee47vtevLt/B3E+bn
# KD+sEq6lLyJsQfmCXBVmzGwOysWGw/YmMwwHS6DTBwJqakAwSEs0qFEgu60bhQji
# WQ1tygVQK+pKHJ6l/aCnHwZ05/LWUpD9r4VIIflXO7ScA+2GRfS0YW6/aOImYIbq
# yK+p/pQd52MbOoZWeE4wggciMIIFCqADAgECAhAOxvKydqFGoH0ObZNXteEIMA0G
# CSqGSIb3DQEBCwUAMGkxCzAJBgNVBAYTAlVTMRcwFQYDVQQKEw5EaWdpQ2VydCwg
# SW5jLjFBMD8GA1UEAxM4RGlnaUNlcnQgVHJ1c3RlZCBHNCBDb2RlIFNpZ25pbmcg
# UlNBNDA5NiBTSEEzODQgMjAyMSBDQTEwHhcNMjEwODEwMDAwMDAwWhcNMjMwODEw
# MjM1OTU5WjCBhzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExEjAQ
# BgNVBAcTCVBhbG8gQWx0bzEVMBMGA1UEChMMVk13YXJlLCBJbmMuMRUwEwYDVQQD
# EwxWTXdhcmUsIEluYy4xITAfBgkqhkiG9w0BCQEWEm5vcmVwbHlAdm13YXJlLmNv
# bTCCAaIwDQYJKoZIhvcNAQEBBQADggGPADCCAYoCggGBAMD6lJG8OWkM12huIQpO
# /q9JnhhhW5UyW9if3/UnoFY3oqmp0JYX/ZrXogUHYXmbt2gk01zz2P5Z89mM4gqR
# bGYC2tx+Lez4GxVkyslVPI3PXYcYSaRp39JsF3yYifnp9R+ON8O3Gf5/4EaFmbeT
# ElDCFBfExPMqtSvPZDqekodzX+4SK1PIZxCyR3gml8R3/wzhb6Li0mG7l0evQUD0
# FQAbKJMlBk863apeX4ALFZtrnCpnMlOjRb85LsjV5Ku4OhxQi1jlf8wR+za9C3DU
# ki60/yiWPu+XXwEUqGInIihECBbp7hfFWrnCCaOgahsVpgz8kKg/XN4OFq7rbh4q
# 5IkTauqFhHaE7HKM5bbIBkZ+YJs2SYvu7aHjw4Z8aRjaIbXhI1G+NtaNY7kSRrE4
# fAyC2X2zV5i4a0AuAMM40C1Wm3gTaNtRTHnka/pbynUlFjP+KqAZhOniJg4AUfjX
# sG+PG1LH2+w/sfDl1A8liXSZU1qJtUs3wBQFoSGEaGBeDQIDAQABo4ICJTCCAiEw
# HwYDVR0jBBgwFoAUaDfg67Y7+F8Rhvv+YXsIiGX0TkIwHQYDVR0OBBYEFIhC+HL9
# QlvsWsztP/I5wYwdfCFNMB0GA1UdEQQWMBSBEm5vcmVwbHlAdm13YXJlLmNvbTAO
# BgNVHQ8BAf8EBAMCB4AwEwYDVR0lBAwwCgYIKwYBBQUHAwMwgbUGA1UdHwSBrTCB
# qjBToFGgT4ZNaHR0cDovL2NybDMuZGlnaWNlcnQuY29tL0RpZ2lDZXJ0VHJ1c3Rl
# ZEc0Q29kZVNpZ25pbmdSU0E0MDk2U0hBMzg0MjAyMUNBMS5jcmwwU6BRoE+GTWh0
# dHA6Ly9jcmw0LmRpZ2ljZXJ0LmNvbS9EaWdpQ2VydFRydXN0ZWRHNENvZGVTaWdu
# aW5nUlNBNDA5NlNIQTM4NDIwMjFDQTEuY3JsMD4GA1UdIAQ3MDUwMwYGZ4EMAQQB
# MCkwJwYIKwYBBQUHAgEWG2h0dHA6Ly93d3cuZGlnaWNlcnQuY29tL0NQUzCBlAYI
# KwYBBQUHAQEEgYcwgYQwJAYIKwYBBQUHMAGGGGh0dHA6Ly9vY3NwLmRpZ2ljZXJ0
# LmNvbTBcBggrBgEFBQcwAoZQaHR0cDovL2NhY2VydHMuZGlnaWNlcnQuY29tL0Rp
# Z2lDZXJ0VHJ1c3RlZEc0Q29kZVNpZ25pbmdSU0E0MDk2U0hBMzg0MjAyMUNBMS5j
# cnQwDAYDVR0TAQH/BAIwADANBgkqhkiG9w0BAQsFAAOCAgEACQAYaQI6Nt2KgxdN
# 6qqfcHB33EZRSXkvs8O9iPZkdDjEx+2fgbBPLUvk9A7T8mRw7brbcJv4PLTYJDFo
# c5mlcmG7/5zwTOuIs2nBGXc/uxCnyW8p7kD4Y0JxPKEVQoIQ8lJS9Uy/hBjyakeV
# ef982JyzvDbOlLBy6AS3ZpXVkRY5y3Va+3v0R/0xJ+JRxUicQhiZRidq2TCiWEas
# d+tLL6jrKaBO+rmP52IM4eS9d4Yids7ogKEBAlJi0NbvuKO0CkgOlFjp1tOvD4sQ
# taHIMmqi40p4Tjyf/sY6yGjROXbMeeF1vlwbBAASPWpQuEIxrNHoVN30YfJyuOWj
# zdiJUTpeLn9XdjM3UlhfaHP+oIAKcmkd33c40SFRlQG9+P9Wlm7TcPxGU4wzXI8n
# Cw/h235jFlAAiWq9L2r7Un7YduqsheJVpGoXmRXJH0T2G2eNFS5/+2sLn98kN2Cn
# J7j6C242onjkZuGL2/+gqx8m5Jbpu9P4IAeTC1He/mX9j6XpIu+7uBoRVwuWD1i0
# N5SiUz7Lfnbr6Q1tHMXKDLFdwVKZos2AKEZhv4SU0WvenMJKDgkkhVeHPHbTahQf
# P1MetR8tdRs7uyTWAjPK5xf5DLEkXbMrUkpJ089fPvAGVHBcHRMqFA5egexOb6sj
# tKncUjJ1xAAtAExGdCh6VD2U5iYxghycMIIcmAIBATB9MGkxCzAJBgNVBAYTAlVT
# MRcwFQYDVQQKEw5EaWdpQ2VydCwgSW5jLjFBMD8GA1UEAxM4RGlnaUNlcnQgVHJ1
# c3RlZCBHNCBDb2RlIFNpZ25pbmcgUlNBNDA5NiBTSEEzODQgMjAyMSBDQTECEA7G
# 8rJ2oUagfQ5tk1e14QgwDQYJYIZIAWUDBAIBBQCggZYwGQYJKoZIhvcNAQkDMQwG
# CisGAQQBgjcCAQQwHAYKKwYBBAGCNwIBCzEOMAwGCisGAQQBgjcCARUwKgYKKwYB
# BAGCNwIBDDEcMBqhGIAWaHR0cDovL3d3dy52bXdhcmUuY29tLzAvBgkqhkiG9w0B
# CQQxIgQgH/WCK1MjTYTVYTPCXcwRkMyK8g6tXYXdOec0UCroBsgwDQYJKoZIhvcN
# AQEBBQAEggGANBJfM0GiOsTtO07HwHfhMAZ9KNGtUFeVcKX/P6YQQcyWaAiTObLB
# OeGbgoB/AuB02atPsPaBa6zhYU7F9COB/7ASsFwbi3StJaLX/lorxlQNy90OlveK
# 9flIkCeobS07AqLkVS96ERRa2npJyhThUORhqUHMbH7WUqSF3UhEA/Pv8UU5voHL
# clvgI1jcoWvWWcyDxTUA9bUSgeKBl6LdXqaddWs4e5m5W0N1/nmfok4PiOqF7qaN
# xY2fp7a6bucoNpjl0NBqac6WzoPA/aCO0NylmrO3LHvGYS8av9BQwKsPcxZgygaw
# d+87nzxfarjvCY5XUbWSVhopf7ivcvTXbKnTjO6cXpwJdt6CuDa8Mcrk6AWKE/YB
# RUT1Tue+0fzpSyfsgLTP0FDmCvegVLohz6z8f8QOCnor82j4EgH3SXZUE+jKxhlB
# 48mUSQ88UK8IILmdV5IFk+W6Tm+LlnR9+AmoLMl4OTtMgqN4XA3/RIDNjQxW/LuI
# SnhFYCsGpuIEoYIZ1zCCGdMGCisGAQQBgjcDAwExghnDMIIZvwYJKoZIhvcNAQcC
# oIIZsDCCGawCAQMxDzANBglghkgBZQMEAgEFADCB3AYLKoZIhvcNAQkQAQSggcwE
# gckwgcYCAQEGCSsGAQQBoDICAzAxMA0GCWCGSAFlAwQCAQUABCBHiICZabxjESGN
# drcbp1LVGq29FK+VLz5k7+H67/M75QIUPe6eNaHuBObU4jpOYsnkfRACyiwYDzIw
# MjEwOTI0MTYxMTEzWjADAgEBoFekVTBTMQswCQYDVQQGEwJCRTEZMBcGA1UECgwQ
# R2xvYmFsU2lnbiBudi1zYTEpMCcGA1UEAwwgR2xvYmFsc2lnbiBUU0EgZm9yIEFk
# dmFuY2VkIC0gRzSgghVkMIIGVTCCBD2gAwIBAgIQAQBGaVCmBKnZcOgd0k1BnzAN
# BgkqhkiG9w0BAQsFADBbMQswCQYDVQQGEwJCRTEZMBcGA1UEChMQR2xvYmFsU2ln
# biBudi1zYTExMC8GA1UEAxMoR2xvYmFsU2lnbiBUaW1lc3RhbXBpbmcgQ0EgLSBT
# SEEzODQgLSBHNDAeFw0yMTA1MjcwOTU1MjNaFw0zMjA2MjgwOTU1MjJaMFMxCzAJ
# BgNVBAYTAkJFMRkwFwYDVQQKDBBHbG9iYWxTaWduIG52LXNhMSkwJwYDVQQDDCBH
# bG9iYWxzaWduIFRTQSBmb3IgQWR2YW5jZWQgLSBHNDCCAaIwDQYJKoZIhvcNAQEB
# BQADggGPADCCAYoCggGBAN8waZh7lw1uo1S0OV9kWXUEIv5OaW/oF3R0pX1RGA5G
# IB9oLrrlZdbJ0pGh7KT3Veqq7TvM+2KbhEKSejJM+fTyHPiY0bkxgSWtrVZnMqb+
# hzLzXMMtYvFNiQw3tH/rKuNgi29sPTHy7cldgJspnVXg4sT/6naTGB5sqat7yR4S
# YdXA56Dm+JApMyy4v25ast3HB0PRO9swC7R4w+zq8aJUz2CTOMz3ZEP1zwgEFnDI
# tNsO1AqKCNy7k8EdbvKMnOshNZ7/j7ywfsKEOH7mnWR6JqDxILG84dgqJZ0YUuRt
# 1EwwCnjMLUaO7VcLP3mVUKcDsDODMrdAnvS0kpcTDFC3nqq0QU4LmInM+8QhRJAy
# jkjyLEsMF+SEV1umrPuXg/mNZFTC7GpDHs8KdpKyEL/t1qMgD7XRMI4aQLE259CO
# ePMTwC8LiJA7CGHjD61Hsw5UcJV/oEPUWsbdF5+UywCHaA7hrpPuLHIEGzIXkEvX
# K4AlBR/lM/TowGgqeReg7wIDAQABo4IBmzCCAZcwDgYDVR0PAQH/BAQDAgeAMBYG
# A1UdJQEB/wQMMAoGCCsGAQUFBwMIMB0GA1UdDgQWBBSufnCBeCAUKa3yePhZANnM
# piQCjjBMBgNVHSAERTBDMEEGCSsGAQQBoDIBHjA0MDIGCCsGAQUFBwIBFiZodHRw
# czovL3d3dy5nbG9iYWxzaWduLmNvbS9yZXBvc2l0b3J5LzAJBgNVHRMEAjAAMIGQ
# BggrBgEFBQcBAQSBgzCBgDA5BggrBgEFBQcwAYYtaHR0cDovL29jc3AuZ2xvYmFs
# c2lnbi5jb20vY2EvZ3N0c2FjYXNoYTM4NGc0MEMGCCsGAQUFBzAChjdodHRwOi8v
# c2VjdXJlLmdsb2JhbHNpZ24uY29tL2NhY2VydC9nc3RzYWNhc2hhMzg0ZzQuY3J0
# MB8GA1UdIwQYMBaAFOoWxmnn48tXRTkzpPBAvtDDvWWWMEEGA1UdHwQ6MDgwNqA0
# oDKGMGh0dHA6Ly9jcmwuZ2xvYmFsc2lnbi5jb20vY2EvZ3N0c2FjYXNoYTM4NGc0
# LmNybDANBgkqhkiG9w0BAQsFAAOCAgEAf2Lo+tl3L0Jvaw/X3UVZPPR1egDsvfZv
# DiNtLTNCchRPRJSBveuMAohMrH/HXc23xCSau5kBaApa6kVh07As132gF+5dgPEa
# 4uf8sd8dMgQoDzaE1wlGLbZ+wEAVIhp5YWeXthKP0E9mLC5UKlgGrJlO/XWtVCYK
# aP+SJ/g8uRltMIEmTIUs83Pcj+DlymRKe0cRTNqi1Lfx5FF65jmwIQcZ4PCMuXFw
# fZHtNJ+LMZ4NxMY+Nitm1sBB1bIjSSLTvl+JNoxa1sVQqj8OTlQJtv4Nkdlx2J82
# PDSOiYO35PNmSs43kItdeuo+o+MHBz2UGRSe+rFnS+u2srcIb5KWRV1M7g5ZWotm
# c2FFNkqGzmNDGW4GOglGOZB0xnMLXkLRzS8ibCQnpwICUZKNAbRdhcf4w0F13WSM
# 8vOY7um3hwmnvQoTMDdiH1nnKXJ3aXV4kLDNHDpcahCGcvcAsjKXWXieTvizZv2v
# K/yJtnWilAo3khNBdd31Pzqup6i0QtPZnFES8vJ61ivsnkwl2W2ckfQfAU9Ix+yP
# +Vuq7PpcEXJgruw3cZS+XEmJTClt81c7GgBXvL6QLkJhgtXf/wCBlnwBVZO4YmTo
# BoarVUpvM8Xz2lgFjd0B9TxVIYX+ezV5xX+y+9itvZ35VQokZHRhiiuXNl9WvfLX
# 4Ox8/fnrktQwggZZMIIEQaADAgECAg0B7BySQN79LkBdfEd0MA0GCSqGSIb3DQEB
# DAUAMEwxIDAeBgNVBAsTF0dsb2JhbFNpZ24gUm9vdCBDQSAtIFI2MRMwEQYDVQQK
# EwpHbG9iYWxTaWduMRMwEQYDVQQDEwpHbG9iYWxTaWduMB4XDTE4MDYyMDAwMDAw
# MFoXDTM0MTIxMDAwMDAwMFowWzELMAkGA1UEBhMCQkUxGTAXBgNVBAoTEEdsb2Jh
# bFNpZ24gbnYtc2ExMTAvBgNVBAMTKEdsb2JhbFNpZ24gVGltZXN0YW1waW5nIENB
# IC0gU0hBMzg0IC0gRzQwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDw
# AuIwI/rgG+GadLOvdYNfqUdSx2E6Y3w5I3ltdPwx5HQSGZb6zidiW64HiifuV6PE
# Ne2zNMeswwzrgGZt0ShKwSy7uXDycq6M95laXXauv0SofEEkjo+6xU//NkGrpy39
# eE5DiP6TGRfZ7jHPvIo7bmrEiPDul/bc8xigS5kcDoenJuGIyaDlmeKe9JxMP11b
# 7Lbv0mXPRQtUPbFUUweLmW64VJmKqDGSO/J6ffwOWN+BauGwbB5lgirUIceU/kKW
# O/ELsX9/RpgOhz16ZevRVqkuvftYPbWF+lOZTVt07XJLog2CNxkM0KvqWsHvD9WZ
# uT/0TzXxnA/TNxNS2SU07Zbv+GfqCL6PSXr/kLHU9ykV1/kNXdaHQx50xHAotIB7
# vSqbu4ThDqxvDbm19m1W/oodCT4kDmcmx/yyDaCUsLKUzHvmZ/6mWLLU2EESwVX9
# bpHFu7FMCEue1EIGbxsY1TbqZK7O/fUF5uJm0A4FIayxEQYjGeT7BTRE6giunUln
# EYuC5a1ahqdm/TMDAd6ZJflxbumcXQJMYDzPAo8B/XLukvGnEt5CEk3sqSbldwKs
# DlcMCdFhniaI/MiyTdtk8EWfusE/VKPYdgKVbGqNyiJc9gwE4yn6S7Ac0zd0hNkd
# Zqs0c48efXxeltY9GbCX6oxQkW2vV4Z+EDcdaxoU3wIDAQABo4IBKTCCASUwDgYD
# VR0PAQH/BAQDAgGGMBIGA1UdEwEB/wQIMAYBAf8CAQAwHQYDVR0OBBYEFOoWxmnn
# 48tXRTkzpPBAvtDDvWWWMB8GA1UdIwQYMBaAFK5sBaOTE+Ki5+LXHNbH8H/IZ1Og
# MD4GCCsGAQUFBwEBBDIwMDAuBggrBgEFBQcwAYYiaHR0cDovL29jc3AyLmdsb2Jh
# bHNpZ24uY29tL3Jvb3RyNjA2BgNVHR8ELzAtMCugKaAnhiVodHRwOi8vY3JsLmds
# b2JhbHNpZ24uY29tL3Jvb3QtcjYuY3JsMEcGA1UdIARAMD4wPAYEVR0gADA0MDIG
# CCsGAQUFBwIBFiZodHRwczovL3d3dy5nbG9iYWxzaWduLmNvbS9yZXBvc2l0b3J5
# LzANBgkqhkiG9w0BAQwFAAOCAgEAf+KI2VdnK0JfgacJC7rEuygYVtZMv9sbB3DG
# +wsJrQA6YDMfOcYWaxlASSUIHuSb99akDY8elvKGohfeQb9P4byrze7AI4zGhf5L
# FST5GETsH8KkrNCyz+zCVmUdvX/23oLIt59h07VGSJiXAmd6FpVK22LG0LMCzDRI
# RVXd7OlKn14U7XIQcXZw0g+W8+o3V5SRGK/cjZk4GVjCqaF+om4VJuq0+X8q5+dI
# ZGkv0pqhcvb3JEt0Wn1yhjWzAlcfi5z8u6xM3vreU0yD/RKxtklVT3WdrG9KyC5q
# ucqIwxIwTrIIc59eodaZzul9S5YszBZrGM3kWTeGCSziRdayzW6CdaXajR63Wy+I
# Lj198fKRMAWcznt8oMWsr1EG8BHHHTDFUVZg6HyVPSLj1QokUyeXgPpIiScseeI8
# 5Zse46qEgok+wEr1If5iEO0dMPz2zOpIJ3yLdUJ/a8vzpWuVHwRYNAqJ7YJQ5NF7
# qMnmvkiqK1XZjbclIA4bUaDUY6qD6mxyYUrJ+kPExlfFnbY8sIuwuRwx773vFNgU
# QGwgHcIt6AvGjW2MtnHtUiH+PvafnzkarqzSL3ogsfSsqh3iLRSd+pZqHcY8yvPZ
# HL9TTaRHWXyVxENB+SXiLBB+gfkNlKd98rUJ9dhgckBQlSDUQ0S++qCV5yBZtnjG
# pGqqIpswggVHMIIEL6ADAgECAg0B8kBCQM79ItvpbHH8MA0GCSqGSIb3DQEBDAUA
# MEwxIDAeBgNVBAsTF0dsb2JhbFNpZ24gUm9vdCBDQSAtIFIzMRMwEQYDVQQKEwpH
# bG9iYWxTaWduMRMwEQYDVQQDEwpHbG9iYWxTaWduMB4XDTE5MDIyMDAwMDAwMFoX
# DTI5MDMxODEwMDAwMFowTDEgMB4GA1UECxMXR2xvYmFsU2lnbiBSb290IENBIC0g
# UjYxEzARBgNVBAoTCkdsb2JhbFNpZ24xEzARBgNVBAMTCkdsb2JhbFNpZ24wggIi
# MA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCVB+hzymb57BTKezz3DQjxtEUL
# LIK0SMbrWzyug7hBkjMUpG9/6SrMxrCIa8W2idHGsv8UzlEUIexK3RtaxtaH7k06
# FQbtZGYLkoDKRN5zlE7zp4l/T3hjCMgSUG1CZi9NuXkoTVIaihqAtxmBDn7Eirxk
# TCEcQ2jXPTyKxbJm1ZCatzEGxb7ibTIGph75ueuqo7i/voJjUNDwGInf5A959eqi
# HyrScC5757yTu21T4kh8jBAHOP9msndhfuDqjDyqtKT285VKEgdt/Yyyic/QoGF3
# yFh0sNQjOvddOsqi250J3l1ELZDxgc1Xkvp+vFAEYzTfa5MYvms2sjnkrCQ2t/Dv
# thwTV5O23rL44oW3c6K4NapF8uCdNqFvVIrxclZuLojFUUJEFZTuo8U4lptOTloL
# R/MGNkl3MLxxN+Wm7CEIdfzmYRY/d9XZkZeECmzUAk10wBTt/Tn7g/JeFKEEsAvp
# /u6P4W4LsgizYWYJarEGOmWWWcDwNf3J2iiNGhGHcIEKqJp1HZ46hgUAntuA1iX5
# 3AWeJ1lMdjlb6vmlodiDD9H/3zAR+YXPM0j1ym1kFCx6WE/TSwhJxZVkGmMOeT31
# s4zKWK2cQkV5bg6HGVxUsWW2v4yb3BPpDW+4LtxnbsmLEbWEFIoAGXCDeZGXkdQa
# J783HjIH2BRjPChMrwIDAQABo4IBJjCCASIwDgYDVR0PAQH/BAQDAgEGMA8GA1Ud
# EwEB/wQFMAMBAf8wHQYDVR0OBBYEFK5sBaOTE+Ki5+LXHNbH8H/IZ1OgMB8GA1Ud
# IwQYMBaAFI/wS3+oLkUkrk1Q+mOai97i3Ru8MD4GCCsGAQUFBwEBBDIwMDAuBggr
# BgEFBQcwAYYiaHR0cDovL29jc3AyLmdsb2JhbHNpZ24uY29tL3Jvb3RyMzA2BgNV
# HR8ELzAtMCugKaAnhiVodHRwOi8vY3JsLmdsb2JhbHNpZ24uY29tL3Jvb3QtcjMu
# Y3JsMEcGA1UdIARAMD4wPAYEVR0gADA0MDIGCCsGAQUFBwIBFiZodHRwczovL3d3
# dy5nbG9iYWxzaWduLmNvbS9yZXBvc2l0b3J5LzANBgkqhkiG9w0BAQwFAAOCAQEA
# SaxexYPzWsthKk2XShUpn+QUkKoJ+cR6nzUYigozFW1yhyJOQT9tCp4YrtviX/yV
# 0SyYFDuOwfA2WXnzjYHPdPYYpOThaM/vf2VZQunKVTm808Um7nE4+tchAw+3Ttlb
# YGpDtH0J0GBh3artAF5OMh7gsmyePLLCu5jTkHZqaa0a3KiJ2lhP0sKLMkrOVPs4
# 6TsHC3UKEdsLfCUn8awmzxFT5tzG4mE1MvTO3YPjGTrrwmijcgDIJDxOuFM8sRer
# 5jUs+dNCKeZfYAOsQmGmsVdqM0LfNTGGyj43K9rE2iT1ThLytrm3R+q7IK1hFreg
# M+Mtiae8szwBfyMagAk06TCCA18wggJHoAMCAQICCwQAAAAAASFYUwiiMA0GCSqG
# SIb3DQEBCwUAMEwxIDAeBgNVBAsTF0dsb2JhbFNpZ24gUm9vdCBDQSAtIFIzMRMw
# EQYDVQQKEwpHbG9iYWxTaWduMRMwEQYDVQQDEwpHbG9iYWxTaWduMB4XDTA5MDMx
# ODEwMDAwMFoXDTI5MDMxODEwMDAwMFowTDEgMB4GA1UECxMXR2xvYmFsU2lnbiBS
# b290IENBIC0gUjMxEzARBgNVBAoTCkdsb2JhbFNpZ24xEzARBgNVBAMTCkdsb2Jh
# bFNpZ24wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDMJXaQeQZ4Ihb1
# wIO2hMoonv0FdhHFrYhy/EYCQ8eyip0EXyTLLkvhYIJG4VKrDIFHcGzdZNHr9Syj
# D4I9DCuul9e2FIYQebs7E4B3jAjhSdJqYi8fXvqWaN+JJ5U4nwbXPsnLJlkNc96w
# yOkmDoMVxu9bi9IEYMpJpij2aTv2y8gokeWdimFXN6x0FNx04Druci8unPvQu7/1
# PQDhBjPogiuuU6Y6FnOM3UEOIDrAtKeh6bJPkC4yYOlXy7kEkmho5TgmYHWyn3f/
# kRTvriBJ/K1AFUjRAjFhGV64l++td7dkmnq/X8ET75ti+w1s4FRpFqkD2m7pg5Nx
# dsZphYIXAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMBAf8EBTADAQH/
# MB0GA1UdDgQWBBSP8Et/qC5FJK5NUPpjmove4t0bvDANBgkqhkiG9w0BAQsFAAOC
# AQEAS0DbwFCq/sgM7/eWVEVJu5YACUGssxOGhigHM8pr5nS5ugAtrqQK0/Xx8Q+K
# v3NnSoPHRHt44K9ubG8DKY4zOUXDjuS5V2yq/BKW7FPGLeQkbLmUY/vcU2hnVj6D
# uM81IcPJaP7O2sJTqsyQiunwXUaMld16WCgaLx3ezQA3QY/tRG3XUyiXfvNnBB4V
# 14qWtNPeTCekTBtzc3b0F5nCH3oO4y0IrQocLP88q1UOD5F+NuvDV0m+4S4tfGCL
# w0FREyOdzvcya5QBqJnnLDMfOjsl0oZAzjsshnjJYS8Uuu7bVW/fhO4FCU29KNhy
# ztNiUGUe65KXgzHZs7XKR1g/XzGCA00wggNJAgEBMG8wWzELMAkGA1UEBhMCQkUx
# GTAXBgNVBAoTEEdsb2JhbFNpZ24gbnYtc2ExMTAvBgNVBAMTKEdsb2JhbFNpZ24g
# VGltZXN0YW1waW5nIENBIC0gU0hBMzg0IC0gRzQCEAEARmlQpgSp2XDoHdJNQZ8w
# DQYJYIZIAWUDBAIBBQCgggEvMBoGCSqGSIb3DQEJAzENBgsqhkiG9w0BCRABBDAt
# BgkqhkiG9w0BCTQxIDAeMA0GCWCGSAFlAwQCAQUAoQ0GCSqGSIb3DQEBCwUAMC8G
# CSqGSIb3DQEJBDEiBCCx8z/gNrkKZ/DiE4LE6QvAbgv7ChLGQrumuJzXIkHHKzCB
# sAYLKoZIhvcNAQkQAi8xgaAwgZ0wgZowgZcEIBPW6cQg/21OJ1RyjGjneIJlZGfb
# mhkPgWWX9n+2zMb5MHMwX6RdMFsxCzAJBgNVBAYTAkJFMRkwFwYDVQQKExBHbG9i
# YWxTaWduIG52LXNhMTEwLwYDVQQDEyhHbG9iYWxTaWduIFRpbWVzdGFtcGluZyBD
# QSAtIFNIQTM4NCAtIEc0AhABAEZpUKYEqdlw6B3STUGfMA0GCSqGSIb3DQEBCwUA
# BIIBgN8KnpoDu93Jq/nCsAeWXKsjX4+0jpv5MWSdaH1Purim6ToI9lAXSkploc7I
# DesZQXUyM0cqtyodk+n/nz2XWQuLZE4hGWzSPtaLcjfmMTspbzJtLjb/SAFGb2xh
# Ux4M58wTWc8c2HR8XfB9atxOdSogsizhP/Ajgz3MxsjJU/z4g6kwjWayy2hi13io
# zBTHSwSJFMVCg82AWnlytIe1R0j7HZf4iNcQSwgiTsTjAA7rgVYGqFZ9U2he6qUw
# IknTuzoW9VKn0LxvsEdmZPdzannZGct4YZI3eeIaiphvNXdC+LRQY0jaesBMNjZ3
# 9SibLhzrAldkuYjbQgJ3hgTHLzZGCGw8Yk/x+jL1+3/jlFvkBGsjCGTTF7veIN40
# 17ab+7dIHV36W1+i1+I6JvgERAurSoJd8P3d2j3LaSGOwBwoHF5ZuMTPAPPHc4XS
# /aQLrV3qwDmHovu1Bhq3URIPCsWGi5SARqQEBXEU/k1zH4W8q9pLldyEkBiTOIdk
# qzDp0w==
# SIG # End signature block
